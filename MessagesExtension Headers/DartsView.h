/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, August 18, 2020 at 5:59:19 AM Central Daylight Time
* Operating System: Version 13.3 (Build 17C54)
* Image Source: /private/var/containers/Bundle/Application/97E911F0-28BD-48AC-8574-5B9D68F985F0/Game Pack.app/PlugIns/MessagesExtension.appex/MessagesExtension
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MessagesExtension/MessagesExtension-Structs.h>
#import <SceneKit/SCNView.h>
#import <MessagesExtension/SCNPhysicsContactDelegate.h>
#import <libobjc.A.dylib/SCNSceneRendererDelegate.h>

@class NSDate, SCNNode, DartsDart, UIView, NSMutableArray, UIImageView, ArcheryArrow, SCNPhysicsBody, SCNScene, SCNGeometry, NSTimer, SKAudioNode, NSMutableString, NSString, SKScene;

@interface DartsView : SCNView <SCNPhysicsContactDelegate, SCNSceneRendererDelegate> {

	NSDate* fps;
	SCNNode* camera1;
	SCNNode* camera2;
	float sin_slow;
	float sin_time;
	float shoot_speed;
	float prev_dst;
	NSDate* startDate;
	NSDate* originalStartDate;
	NSDate* prevDate;
	CGPoint touchStart;
	CGPoint touchStart0;
	CGPoint touchCurrent;
	CGPoint touchMoved;
	CGPoint touchPrev;
	BOOL touchStarted;
	SCNNode* dart_node;
	SCNNode* shadow_node;
	SCNNode* board_light;
	SCNNode* board_win_light;
	DartsDart* main_dart;
	SCNNode* game_board;
	SCNNode* sphere_target;
	SCNNode* sphere_target2;
	SCNNode* sphere_target3;
	SCNNode* sphere_target4;
	UIView* v;
	UIView* v2;
	UIView* v3;
	NSMutableArray* darts;
	UIImageView* aim_view;
	CGPoint aim_origin;
	CGPoint aim_pos;
	CGPoint aim_speed;
	float aim_breath;
	int shot_time;
	NSMutableArray* arrows;
	SCNNode* gameball;
	BOOL alphaing;
	BOOL touching;
	int anim;
	SCNNode* weapon;
	SCNNode* table;
	SCNNode* cam;
	SCNNode* paddle;
	BOOL first_press;
	CGPoint first_press_pos;
	SCNNode* paddle_shadow;
	SCNNode* gameball_shadow;
	NSMutableArray* highlight_textures;
	SCNNode* highlight;
	SCNNode* grass;
	SCNNode* target;
	SCNNode* target_front;
	SCNNode* weapon_arrow;
	SCNNode* arrow_shadow;
	SCNNode* plack;
	ArcheryArrow* arrow;
	SCNVector3 arrow_target;
	SCNNode* rayplane;
	SCNNode* pole1;
	SCNNode* pole2;
	SCNNode* ball;
	SCNNode* basket;
	SCNNode* basket_main;
	SCNNode* net;
	SCNNode* net2;
	SCNNode* net_col;
	SCNNode* ball_shadow;
	SCNNode* selected;
	SCNPhysicsBody* selected_body;
	SCNScene* scene;
	float speed;
	float speed_x;
	CGPoint touch_start;
	CGPoint prev_pos;
	CGPoint touch_pos;
	CGPoint prev_pos2;
	CGVector vec;
	int last_shot;
	int last_shot2;
	int net_frame;
	NSMutableArray* balls;
	SCNNode* count11;
	SCNNode* count12;
	SCNNode* count21;
	SCNNode* count22;
	SCNNode* time1;
	SCNNode* time2;
	int times1;
	int times2;
	SCNGeometry* mat2;
	NSDate* last_bounce;
	NSDate* last_rim;
	NSTimer* timer2;
	NSMutableArray* net4_textures;
	NSMutableArray* net3_textures;
	NSMutableArray* num_textures;
	NSDate* last;
	int shot_back_timer;
	SKAudioNode* wind_sound;
	SKAudioNode* press_sound;
	BOOL start_aim;
	BOOL stopped;
	BOOL touched;
	BOOL _show_tip;
	int state;
	int seed;
	int score1;
	int score2;
	int player;
	int timer;
	int times;
	float ratio;
	int time;
	NSMutableString* replay_send;
	NSDate* start_time;
	NSMutableArray* replay1;
	NSMutableArray* replay2;
	NSString* mode;
	SKScene* sk_scene;

}

@property (assign) BOOL touched; 
@property (assign) BOOL show_tip;                                   //@synthesize show_tip=_show_tip - In the implementation block
@property (assign) BOOL stopped; 
@property (retain) SKScene * sk_scene; 
@property (assign) int time; 
@property (assign) float ratio; 
@property (assign) int times; 
@property (assign) int player; 
@property (retain) NSMutableArray * replay1; 
@property (retain) NSMutableArray * replay2; 
@property (assign) int score1; 
@property (assign) int score2; 
@property (assign) int seed; 
@property (assign) int state; 
@property (assign) int timer; 
@property (retain) NSDate * start_time; 
@property (retain) NSMutableString * replay_send; 
@property (retain) NSString * mode; 
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
-(void)Skip;
-(void)touchMovedToPoint:(CGPoint)arg1 ;
-(void)touchUpAtPoint:(CGPoint)arg1 ;
-(int)score1;
-(int)score2;
-(NSMutableString *)replay_send;
-(void)shoot;
-(void)setScore1:(int)arg1 ;
-(void)setScore2:(int)arg1 ;
-(NSMutableArray *)replay2;
-(void)rem:(id)arg1 ;
-(void)spawn:(int)arg1 ;
-(void)spawn;
-(void)setReplay_send:(NSMutableString *)arg1 ;
-(void)setStart_time:(NSDate *)arg1 ;
-(NSMutableArray *)replay1;
-(void)setReplay1:(NSMutableArray *)arg1 ;
-(void)setReplay2:(NSMutableArray *)arg1 ;
-(SKScene *)sk_scene;
-(void)setSk_scene:(SKScene *)arg1 ;
-(void)spawnDart;
-(void)shoot:(CGPoint)arg1 target:(BOOL)arg2 pre:(BOOL)arg3 ;
-(void)shoot:(CGPoint)arg1 target:(BOOL)arg2 ;
-(void)clean;
-(void)shoot:(CGPoint)arg1 full_score:(int)arg2 score:(int)arg3 multi:(int)arg4 ;
-(BOOL)show_tip;
-(void)setShow_tip:(BOOL)arg1 ;
-(void)updateShoot;
-(id)findIntersection:(CGPoint)arg1 p2:(CGPoint)arg2 p3:(CGPoint)arg3 p4:(CGPoint)arg4 ;
-(void)preshoot;
-(void)setMode:(NSString *)arg1 ;
-(void)unload;
-(void)start;
-(int)state;
-(int)time;
-(NSString *)mode;
-(int)timer;
-(void)setTimer:(int)arg1 ;
-(void)setState:(int)arg1 ;
-(BOOL)stopped;
-(void)setStopped:(BOOL)arg1 ;
-(void)setTime:(int)arg1 ;
-(void)update;
-(int)seed;
-(NSDate *)start_time;
-(id)initWithFrame:(CGRect)arg1 ;
-(void)touchesBegan:(id)arg1 withEvent:(id)arg2 ;
-(void)touchesMoved:(id)arg1 withEvent:(id)arg2 ;
-(void)touchesEnded:(id)arg1 withEvent:(id)arg2 ;
-(unsigned long long)supportedInterfaceOrientations;
-(BOOL)shouldAutorotate;
-(void)didReceiveMemoryWarning;
-(BOOL)prefersStatusBarHidden;
-(void)setSeed:(int)arg1 ;
-(int)player;
-(void)setPlayer:(int)arg1 ;
-(float)ratio;
-(void)setRatio:(float)arg1 ;
-(void)setTimes:(int)arg1 ;
-(int)times;
-(void)setTouched:(BOOL)arg1 ;
-(BOOL)touched;
-(void)renderer:(id)arg1 updateAtTime:(double)arg2 ;
-(void)renderer:(id)arg1 didSimulatePhysicsAtTime:(double)arg2 ;
-(void)createScene;
@end

