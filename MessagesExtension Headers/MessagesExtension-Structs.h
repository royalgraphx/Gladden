/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, August 18, 2020 at 5:59:20 AM Central Daylight Time
* Operating System: Version 13.3 (Build 17C54)
* Image Source: /private/var/containers/Bundle/Application/97E911F0-28BD-48AC-8574-5B9D68F985F0/Game Pack.app/PlugIns/MessagesExtension.appex/MessagesExtension
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

typedef struct _NSZone* NSZoneRef;

typedef struct CGPoint {
	double x;
	double y;
} CGPoint;

typedef struct CGSize {
	double width;
	double height;
} CGSize;

typedef struct CGRect {
	CGPoint origin;
	CGSize size;
} CGRect;

typedef struct CGContext* CGContextRef;

typedef struct __SCNetworkReachability* SCNetworkReachabilityRef;

typedef struct sqlite3* sqlite3Ref;

typedef struct sqlite3_stmt* sqlite3_stmtRef;

typedef struct __SecKey* SecKeyRef;

typedef struct {
	long long value;
	int timescale;
	unsigned flags;
	long long epoch;
} SCD_Struct_IM9;

typedef struct CGImageSource* CGImageSourceRef;

typedef struct CGImage* CGImageRef;

typedef struct {
	long long field1;
	long long field2;
} SCD_Struct_AD12;

typedef struct {
	id field1;
	id field2;
} SCD_Struct_AD13;

typedef struct __CFRunLoopTimer* CFRunLoopTimerRef;

typedef struct __CFNetService* CFNetServiceRef;

typedef struct _DNSServiceRef_t* DNSServiceRef_tRef;

typedef struct __CFSocket* CFSocketRef;

typedef struct __CFRunLoopSource* CFRunLoopSourceRef;

typedef struct __CFHTTPMessage* CFHTTPMessageRef;

typedef struct ADCAxisPresentationSettings {
	double size;
	long long sizingType;
	long long position;
	BOOL adjustToSafeArea;
} ADCAxisPresentationSettings;

typedef struct z_stream_s {
	char* next_in;
	unsigned avail_in;
	unsigned long long total_in;
	char* next_out;
	unsigned avail_out;
	unsigned long long total_out;
	char* msg;
	internal_state state;
	/*function pointer*/void* zalloc;
	/*function pointer*/void* zfree;
	void opaque;
	int data_type;
	unsigned long long adler;
	unsigned long long reserved;
} z_stream_s;

typedef struct NSRange {
	unsigned long long location;
	unsigned long long length;
} NSRange;

typedef struct AdColonyAdSize {
	double width;
	double height;
} AdColonyAdSize;

typedef struct ADCViewability {
	unsigned long long changeType;
	double visiblePart;
	double volume;
	long long orientation;
	CGRect rect;
} ADCViewability;

typedef struct UIEdgeInsets {
	double top;
	double left;
	double bottom;
	double right;
} UIEdgeInsets;

typedef struct {
	BOOL field1;
	CGRect field2;
	id field3;
	id field4;
	id field5;
} SCD_Struct_Ad26;

typedef struct shared_ptr<chameleon::Sound> {
	Sound __ptr_;
	__shared_weak_count __cntrl_;
} shared_ptr<chameleon::Sound>;

typedef struct SCNVector3 {
	float x;
	float y;
	float z;
} SCNVector3;

typedef struct b2Vec2 {
	float x;
	float y;
} b2Vec2;

typedef struct b2PolygonShape {
	/*function pointer*/void* _vptr$b2Shape;
	int m_type;
	float m_radius;
	unsigned m_centroid : 2Vec2;
	unsigned m_vertices[8] : 2Vec2;
	unsigned m_normals[8] : 2Vec2;
	int m_count;
} b2PolygonShape;

typedef struct __SecTrust* SecTrustRef;

typedef struct {
	long long version;
	void info;
	/*function pointer*/void* retain;
	/*function pointer*/void* release;
	/*function pointer*/void* copyDescription;
} SCD_Struct_PS32;

typedef struct CGVector {
	double dx;
	double dy;
} CGVector;

typedef struct _compressed_pair<std::__1::shared_ptr<void> *, std::__1::allocator<std::__1::shared_ptr<void> > > {
	shared_ptr<void> __value_;
} compressed_pair<std::__1::shared_ptr<void> *, std::__1::allocator<std::__1::shared_ptr<void> > >;

typedef struct vector<std::__1::shared_ptr<void>, std::__1::allocator<std::__1::shared_ptr<void> > > {
	shared_ptr<void> __begin_;
	shared_ptr<void> __end_;
	compressed_pair<std::__1::shared_ptr<void> *, std::__1::allocator<std::__1::shared_ptr<void> > > __end_cap_;
} vector<std::__1::shared_ptr<void>, std::__1::allocator<std::__1::shared_ptr<void> > >;

typedef struct {
	unsigned long long field1;
	id field2;
	unsigned long long field3;
	unsigned long long field4[5];
} SCD_Struct_PI36;

typedef struct FBAdSize {
	CGSize size;
} FBAdSize;

typedef struct opaque_pthread_mutex_t {
	long long __sig;
	char __opaque[56];
} opaque_pthread_mutex_t;

typedef struct CGColor* CGColorRef;

typedef struct recursive_mutex {
	opaque_pthread_mutex_t __m_;
} recursive_mutex;

typedef struct AudioStreamBasicDescription {
	double mSampleRate;
	unsigned mFormatID;
	unsigned mFormatFlags;
	unsigned mBytesPerPacket;
	unsigned mFramesPerPacket;
	unsigned mBytesPerFrame;
	unsigned mChannelsPerFrame;
	unsigned mBitsPerChannel;
	unsigned mReserved;
} AudioStreamBasicDescription;

typedef struct AQBufferParameters {
	unsigned bufferSize;
	unsigned packetCount;
} AQBufferParameters;

typedef struct SMPTETime {
	short mSubframes;
	short mSubframeDivisor;
	unsigned mCounter;
	unsigned mType;
	unsigned mFlags;
	short mHours;
	short mMinutes;
	short mSeconds;
	short mFrames;
} SMPTETime;

typedef struct AudioTimeStamp {
	double mSampleTime;
	unsigned long long mHostTime;
	double mRateScalar;
	unsigned long long mWordClockTime;
	SMPTETime mSMPTETime;
	unsigned mFlags;
	unsigned mReserved;
} AudioTimeStamp;

typedef struct AQBufferState {
	AudioQueueBuffer bufferRef;
	AudioTimeStamp timestamp;
	BOOL enqueued;
	double lastFramePts;
} AQBufferState;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	unsigned field5;
	BOOL field6;
	BOOL field7;
	BOOL field8;
	BOOL field9;
	BOOL field10;
	BOOL field11;
	BOOL field12;
	BOOL field13;
	BOOL field14;
	BOOL field15;
	BOOL field16;
	BOOL field17;
	BOOL field18;
	BOOL field19;
	BOOL field20;
	BOOL field21;
	int field22;
	BOOL field23;
	BOOL field24;
	BOOL field25;
	BOOL field26;
	BOOL field27;
	BOOL field28;
	BOOL field29;
	double field30;
	BOOL field31;
	int field32;
	int field33;
	double field34;
	double field35;
} SCD_Struct_FN46;

typedef struct OpaqueCMClock* OpaqueCMClockRef;

typedef struct OpaqueCMTimebase* OpaqueCMTimebaseRef;

typedef struct OpaqueAudioQueue* OpaqueAudioQueueRef;

typedef struct OpaqueAudioQueueTimeline* OpaqueAudioQueueTimelineRef;

typedef struct {
	double noAudioThreshold;
	BOOL useLastFramePts;
	int avSyncThresholdMs;
	int avSyncMinSampleSize;
	double avSyncPassRate;
} SCD_Struct_FN51;

typedef struct __CVBuffer* CVBufferRef;

typedef struct opaqueCMSampleBuffer* opaqueCMSampleBufferRef;

typedef struct CGAffineTransform {
	double a;
	double b;
	double c;
	double d;
	double tx;
	double ty;
} CGAffineTransform;

typedef struct FNFDecompressionConfig {
	BOOL debuggingErrorEnabled;
	BOOL decompressionErrorOutOnceOnly;
	BOOL stopDecodingOnInvalidate;
	BOOL invalidateOnError;
	BOOL decodeFrameWithOutputHandler;
	BOOL badFrameFix;
	BOOL badFrameQuickCheck;
	BOOL refactorClosingSession;
	unsigned recoverDecodeFrameFailureTimes;
	unsigned maxGopStoredFrameCount;
} FNFDecompressionConfig;

typedef struct {
	BOOL field1;
	BOOL field2;
	BOOL field3;
	BOOL field4;
	int field5;
	unsigned field6;
	int field7;
	BOOL field8;
	BOOL field9;
	BOOL field10;
	BOOL field11;
	BOOL field12;
	BOOL field13;
	BOOL field14;
	BOOL field15;
	FNFDecompressionConfig field16;
	BOOL field17;
	BOOL field18;
} SCD_Struct_FN56;

typedef struct FNFPlayerStallState {
	BOOL isStalled;
	BOOL isStartStall;
	unsigned long long stallStartPositionTimeInMilliseconds;
} FNFPlayerStallState;

typedef struct FNFPlayerSeekState {
	BOOL seekFinished;
	int seekReason;
} FNFPlayerSeekState;

typedef struct FNFFrameDisplayState {
	double pts;
	double audioDisplayTime;
	double videoDisplayTime;
} FNFFrameDisplayState;

typedef struct FNFAVSyncStatus {
	double offsetAverageSec;
	long long offsetSampleCount;
} FNFAVSyncStatus;

typedef struct FNFDisplayedFrameInfo {
	double presentTimestamp;
	double displayedPlayerTimestamp;
	double displayedUnixTimestamp;
} FNFDisplayedFrameInfo;

typedef struct FNFPlayerInternalState {
	BOOL playingRequested;
	BOOL isPlaying;
	BOOL endTimeReached;
	BOOL firstAudioFrameEnqueued;
	BOOL stoppedEnqueuingVideo;
	BOOL stoppedEnqueuingAudio;
	BOOL isFirstVideoFrame;
	BOOL recreatedLayerOnError;
	BOOL audioEngineInitialized;
	BOOL isReadyForDisplay;
	BOOL previousSeekCompletionBlockExecuted;
	BOOL muted;
	BOOL showCaptions;
	SCD_Struct_IM9 lastStartingTime;
	SCD_Struct_IM9 lastRequestedStartTime;
	SCD_Struct_IM9 lastRequestedMuteTime;
	SCD_Struct_IM9 latestEnqueuedVideoPts;
	SCD_Struct_IM9 latestEnqueuedAudioPts;
	SCD_Struct_IM9 latestEnqueuedAudioDts;
	float lastPlayRate;
	SCD_Struct_IM9 lastSeekToTime;
	float playRate;
	id playbackTimeObserverForAsset;
	id durationTimerForAsset;
	id stallTimerObserver;
	id seekFrameUpdateObserver;
	id sampleBufferFlushTimerObserver;
	id levelMeterTimerObserver;
	SCD_Struct_IM9 backgroundPauseTime;
	unsigned sampleAudioFrameSize;
	id representationId;
	 NSString;
	unsigned long long lastFrameSeekAttempt;
	long long status;
	FNFPlayerStallState stallState;
	FNFPlayerSeekState seekState;
	int pauseReason;
	CGRect bounds;
	/*^block*/id frameSeekCompletionBlock;
	id loggingContext;
	 <FNFVideoPlaybackLoggingContext>;
	id lastRequestedMuteVideoId;
	 NSString;
	id playerItemWarning;
	 NSError;
	id playerItemError;
	 NSError;
	id playerItemLoadedTimeRanges;
	 NSArray;
	SCD_Struct_IM9 playerItemDuration;
	FNFFrameDisplayState frameDisplayState;
	FNFAVSyncStatus avSync;
	FNFDisplayedFrameInfo displayedFrameInfo;
} FNFPlayerInternalState;

typedef struct opaqueCMFormatDescription* opaqueCMFormatDescriptionRef;

typedef struct OpaqueCMBlockBuffer* OpaqueCMBlockBufferRef;

typedef struct AudioBuffer {
	unsigned mNumberChannels;
	unsigned mDataByteSize;
	void mData;
} AudioBuffer;

typedef struct {
	double field1;
	double field2;
	double field3;
	double field4;
	double field5;
	double field6;
	BOOL field7;
	double field8;
	double field9;
	double field10;
	double field11;
	double field12;
	double field13;
	BOOL field14;
} SCD_Struct_FN66;

typedef struct mutex {
	opaque_pthread_mutex_t __m_;
} mutex;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> >;

typedef struct _tree_end_node<std::__1::__tree_node_base<void *> *> {
	__tree_node_base<void *> __left_;
} tree_end_node<std::__1::__tree_node_base<void *> *>;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > >;

typedef struct _tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<FBDataSegment, NSData *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true> > __pair3_;
} tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > >;

typedef struct map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > > {
	tree<std::__1::__value_type<FBDataSegment, NSData *>, std::__1::__map_value_compare<FBDataSegment, std::__1::__value_type<FBDataSegment, NSData *>, cmpOfDataSegment, true>, std::__1::allocator<std::__1::__value_type<FBDataSegment, NSData *> > > __tree_;
} map<FBDataSegment, NSData *, cmpOfDataSegment, std::__1::allocator<std::__1::pair<const FBDataSegment, NSData *> > >;

typedef struct {
	unsigned long long field1;
	unsigned long long field2;
	unsigned long long field3;
	double field4;
	double field5;
	double field6;
	double field7;
	double field8;
	double field9;
	double field10;
	BOOL field11;
	BOOL field12;
	BOOL field13;
	BOOL field14;
	BOOL field15;
	BOOL field16;
	BOOL field17;
} SCD_Struct_FN73;

typedef struct FNFMP4MvhdAtom {
	unsigned timescale;
	unsigned duration;
	float rotationAngle;
} FNFMP4MvhdAtom;

typedef struct _compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __value_;
} compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > {
	FNFMP4TrakAtomForSeek __begin_;
	FNFMP4TrakAtomForSeek __end_;
	compressed_pair<FNFMP4TrakAtomForSeek *, std::__1::allocator<FNFMP4TrakAtomForSeek> > __end_cap_;
} vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> >;

typedef struct FNFMP4MoovAtomCompressed {
	vector<FNFMP4TrakAtomForSeek, std::__1::allocator<FNFMP4TrakAtomForSeek> > trakAtoms;
	FNFMP4MvhdAtom mvhdAtom;
} FNFMP4MoovAtomCompressed;

typedef struct _compressed_pair<int *, std::__1::allocator<int> > {
	int __value_;
} compressed_pair<int *, std::__1::allocator<int> >;

typedef struct vector<int, std::__1::allocator<int> > {
	int __begin_;
	int __end_;
	compressed_pair<int *, std::__1::allocator<int> > __end_cap_;
} vector<int, std::__1::allocator<int> >;

typedef struct _compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > {
	unsigned long long __value_;
} compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> >;

typedef struct vector<unsigned long long, std::__1::allocator<unsigned long long> > {
	unsigned long long __begin_;
	unsigned long long __end_;
	compressed_pair<unsigned long long *, std::__1::allocator<unsigned long long> > __end_cap_;
} vector<unsigned long long, std::__1::allocator<unsigned long long> >;

typedef struct _compressed_pair<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> > > {
	pair<double, double> __value_;
} compressed_pair<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> > >;

typedef struct vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > > {
	pair<double, double> __begin_;
	pair<double, double> __end_;
	compressed_pair<std::__1::pair<double, double> *, std::__1::allocator<std::__1::pair<double, double> > > __end_cap_;
} vector<std::__1::pair<double, double>, std::__1::allocator<std::__1::pair<double, double> > >;

typedef struct _compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true> > {
	unsigned long long __value_;
} compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true> >;

typedef struct _compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, void *> > > {
	tree_end_node<std::__1::__tree_node_base<void *> *> __value_;
} compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, void *> > >;

typedef struct _tree<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *> > > {
	__tree_end_node<std::__1::__tree_node_base<void *> *> __begin_node_;
	compressed_pair<std::__1::__tree_end_node<std::__1::__tree_node_base<void *> *>, std::__1::allocator<std::__1::__tree_node<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, void *> > > __pair1_;
	compressed_pair<unsigned long, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true> > __pair3_;
} tree<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *> > >;

typedef struct map<unsigned long long, opaqueCMSampleBuffer *, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, opaqueCMSampleBuffer *> > > {
	tree<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::__map_value_compare<unsigned long long, std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *>, std::__1::less<unsigned long long>, true>, std::__1::allocator<std::__1::__value_type<unsigned long long, opaqueCMSampleBuffer *> > > __tree_;
} map<unsigned long long, opaqueCMSampleBuffer *, std::__1::less<unsigned long long>, std::__1::allocator<std::__1::pair<const unsigned long long, opaqueCMSampleBuffer *> > >;

typedef struct OpaqueVTDecompressionSession* OpaqueVTDecompressionSessionRef;

typedef struct fnf_avc1_frame_check_t {
	BOOL success;
	BOOL isKeyframe;
	int naluCount;
} fnf_avc1_frame_check_t;

typedef struct _compressed_pair<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> *, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> > > {
	tuple<unsigned long long, opaqueCMSampleBuffer *> __value_;
} compressed_pair<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> *, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> > >;

typedef struct vector<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *>, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> > > {
	tuple<unsigned long long, opaqueCMSampleBuffer *> __begin_;
	tuple<unsigned long long, opaqueCMSampleBuffer *> __end_;
	compressed_pair<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> *, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> > > __end_cap_;
} vector<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *>, std::__1::allocator<std::__1::tuple<unsigned long long, opaqueCMSampleBuffer *> > >;

typedef union {
	long long i;
	unsigned long long u;
	float f;
	BOOL b;
} SCD_Union_FB92;

