/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, August 18, 2020 at 5:59:20 AM Central Daylight Time
* Operating System: Version 13.3 (Build 17C54)
* Image Source: /private/var/containers/Bundle/Application/97E911F0-28BD-48AC-8574-5B9D68F985F0/Game Pack.app/PlugIns/MessagesExtension.appex/MessagesExtension
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MessagesExtension/MessagesExtension-Structs.h>
#import <MessagesExtension/FNFPlayerDisplayEngineDelegate.h>
#import <MessagesExtension/FNFAssetEventListener.h>

@protocol FNFAssetForPlayer, FNFPlayerAudioEngine, FNFPlayerAudioDecoder, FNFPlayerDisplayEngine, FNFClock, FNFPlayerCaptionParser, FNFPlayerLiveTraceManager, FNFFrameDisplayHandling, OS_dispatch_queue, FNFSynchronousPlayerDelegate;
@class NSObject, NSError, FNFPlayerExponentialBackoffTimer;

@interface FNFSynchronousPlayer : NSObject <FNFPlayerDisplayEngineDelegate, FNFAssetEventListener> {

	id<FNFAssetForPlayer> _playerAsset;
	id<FNFPlayerAudioEngine> _audioEngine;
	id<FNFPlayerAudioDecoder> _audioDecoder;
	id<FNFPlayerDisplayEngine> _displayEngine;
	id<FNFClock> _clock;
	id<FNFPlayerCaptionParser> _captionParser;
	id<FNFPlayerLiveTraceManager> _liveTraceManager;
	id<FNFFrameDisplayHandling> _frameDisplayHandler;
	NSObject*<OS_dispatch_queue> _runningQueue;
	FNFPlayerInternalState _playerInternalState;
	NSError* _playerError;
	float _volume;
	float _volumeRampTime;
	/*^block*/id _audioLevelCallback;
	/*^block*/id _representationChangedCallback;
	BOOL _endFrameSeekIfNoMoreFrames;
	BOOL _useLastCallbackInBackToBackFrameSeek;
	BOOL _flushAudioQueueOnPause;
	BOOL _enableASRCaptions;
	BOOL _isDurationIndefinite;
	BOOL _playbackAVSyncEarlyAudioSetup;
	BOOL _hasPendingMuteRequest;
	unsigned _minSampleAudioFrameSize;
	BOOL _checkActiveBeforeStallResume;
	BOOL _enableAVSyncLogging;
	BOOL _enableAVSyncMetrics;
	FNFPlayerExponentialBackoffTimer* _exponentialBackoffTimer;
	double _lastResetTime;
	double _lastAVSyncMetricTime;
	long long _audioRetryCount;
	BOOL _displaySeekFrame;
	BOOL _skipBackToBackSeekAsApplicable;
	BOOL _audioPreparedToPlay;
	BOOL _decompressionErrorDebugging;
	BOOL _enableAdsFrameLogging;
	SCD_Struct_IM9 _timeBetweenSampleBufferFlushDuringFrameSeek;
	BOOL _forbidEnqueueVideoWhenAppInactive;
	BOOL _displayFirstFrame;
	BOOL _allowsVideoPlaybackWithoutAudio;
	BOOL _restartStallStateWhenPlayingRequested;
	int _frameLoggingSampleRate;
	BOOL _shouldPreventNegativeAudioStartTime;
	BOOL _negativeAudioStartTimeThreshold;
	id<FNFSynchronousPlayerDelegate> _delegate;

}

@property (assign,nonatomic,__weak) id<FNFSynchronousPlayerDelegate> delegate;              //@synthesize delegate=_delegate - In the implementation block
-(void)setUserSelectedQuality:(id)arg1 ;
-(void)setVolume:(float)arg1 rampTime:(float)arg2 ;
-(void)flushTimeObserver:(id)arg1 ;
-(void)manifestDataFetched:(id)arg1 isFirstManifest:(BOOL)arg2 ;
-(void)pauseWithPauseReason:(int)arg1 ;
-(void)setCaptionParser:(id)arg1 ;
-(void)setAudioDecoder:(id)arg1 ;
-(void)replaceCurrentItemWithPlayerItem:(id)arg1 loggingContext:(id)arg2 ;
-(void)setShowCaptions:(BOOL)arg1 ;
-(void)setLiveTraceManager:(id)arg1 ;
-(BOOL)showCaptions;
-(SCD_Struct_IM9)lastStartingTime;
-(SCD_Struct_IM9)lastRequestedStartTime;
-(void)addLevelMeterCallback:(/*^block*/id)arg1 timeInterval:(SCD_Struct_IM9)arg2 ;
-(void)removeLevelMeterCallback;
-(void)addRepresentationChangedCallback:(/*^block*/id)arg1 ;
-(void)seekToTime:(SCD_Struct_IM9)arg1 seekReason:(int)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)seekToTime:(SCD_Struct_IM9)arg1 toleranceBefore:(SCD_Struct_IM9)arg2 toleranceAfter:(SCD_Struct_IM9)arg3 seekReason:(int)arg4 completionHandler:(/*^block*/id)arg5 ;
-(void)timeLoadedChanged:(id)arg1 ;
-(void)playerItemDidWarn:(id)arg1 ;
-(void)playbackDidDryOut;
-(void)playbackDidUndry;
-(void)playerItemDidFail:(id)arg1 ;
-(void)playerLiveItemDidEnd:(id)arg1 ;
-(id)callbackQueueForDisplayEngineDelegate;
-(void)displayEngineUpdatedWithError:(id)arg1 ;
-(void)displayEngineStartedToDisplayFrameAt:(SCD_Struct_IM9)arg1 playerTimestamp:(SCD_Struct_IM9)arg2 ;
-(void)displayEngineIsReadyForDisplay:(BOOL)arg1 ;
-(void)displayEngineDidLayoutSubLayers:(CGRect)arg1 ;
-(void)displayEngineDidWarn:(id)arg1 ;
-(id)initWithDisplayEngine:(id)arg1 config:(SCD_Struct_FN46)arg2 audioEngine:(id)arg3 audioDecoder:(id)arg4 clock:(id)arg5 runningQueue:(id)arg6 muted:(BOOL)arg7 asyncTimebase:(BOOL)arg8 ;
-(id)createPeriodicTimeObserverForInterval:(SCD_Struct_IM9)arg1 followMasterClock:(BOOL)arg2 usingBlock:(/*^block*/id)arg3 ;
-(void)_syncAudioEngineWithClock;
-(double)prepareToSeekWithTime:(SCD_Struct_IM9)arg1 ;
-(void)_seekToTime:(SCD_Struct_IM9)arg1 frameSeekOn:(BOOL)arg2 seekReason:(int)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)_handleSeekCompletionHandlerWithSeekReason:(int)arg1 seekFinished:(BOOL)arg2 completionHandler:(/*^block*/id)arg3 ;
-(void)_handleFramePerfectSeekWithSeekReason:(int)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)_handleSeekCancellation;
-(void)setMuted:(BOOL)arg1 muteReason:(int)arg2 ;
-(void)didConnectWithExternalScreen;
-(void)didDisconnectWithExternalScreen;
-(void)didChangeScreenCaptured;
-(BOOL)_isPlayRestricted;
-(BOOL)_isHDMIConnectedForProtectedContent;
-(BOOL)_isScreenCapturedForProtectedContent;
-(void)_levelMeterCallback;
-(void)_reenableLevelMeteringIfNeeded;
-(void)_pausePlayback:(int)arg1 ;
-(void)_setupAudioEngine;
-(void)_updateTimersOnPause;
-(void)_manageStallStateWithDidStartPlaying:(BOOL)arg1 ;
-(void)_startUpdateSeekFrame;
-(void)_updateFrameAfterSeek;
-(void)_startStalling:(BOOL)arg1 ;
-(id)_addPlaybackTimerForAsset;
-(id)_addDurationTimerForAsset;
-(id)_addSeekFrameUpdateTimer;
-(id)_addStallTimer;
-(id)_addSampleBufferFlushTimerWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_flushSampleBuffersDuringFrameSeekWithCompletionHandler:(/*^block*/id)arg1 ;
-(void)_playbackFinishedTimeForAsset:(SCD_Struct_IM9)arg1 ;
-(void)_playbackTimeListenerForAsset:(SCD_Struct_IM9)arg1 ;
-(BOOL)_enqueuedTime:(SCD_Struct_IM9)arg1 isGreaterThanLength:(SCD_Struct_IM9)arg2 ;
-(BOOL)_videoBufferLengthIsGreaterThan:(SCD_Struct_IM9)arg1 ;
-(BOOL)_audioBufferLengthIsGreaterThan:(SCD_Struct_IM9)arg1 ;
-(void)_adjustAudioFrameToCurrentPlaybackTime;
-(BOOL)_audioPutDataIntoBufferCallback:(AudioQueueBuffer*)arg1 timestamp:(AudioTimeStamp*)arg2 framePts:(SCD_Struct_IM9*)arg3 isfirstPacket:(BOOL*)arg4 ;
-(BOOL)_canParseCaptions;
-(void)_markDisplayImmediately:(opaqueCMSampleBufferRef)arg1 ;
-(void)_videoLayerEnqueueFrameCallback:(id)arg1 ;
-(void)_videoLayerEnqueueDecompressedFrameCallback;
-(void)_checkIfRepresentationChanged;
-(BOOL)_videoHasAudioTrack;
-(BOOL)_videoIsAudioActive;
-(void)_startVideo:(id)arg1 ;
-(void)_enqueueBuffer:(id)arg1 ;
-(void)_updateToFailureStatusWithError:(id)arg1 ;
-(void)_syncVolume;
-(void)_audioEngineEnqueueCallback:(AudioTimeStamp)arg1 firstFramePts:(double)arg2 lastFramePts:(double)arg3 ;
-(void)_audioEngineOutputCallback:(double)arg1 framePts:(double)arg2 ;
-(void)_audioEngineErrorCallback:(id)arg1 ;
-(void)_audioDecoderErrorCallback:(id)arg1 ;
-(void)_logAudioPlaybackWarning:(id)arg1 ;
-(void)_handleAudioPlaybackError:(id)arg1 ;
-(void)_restartAudioPlayback;
-(void)_setupLayer;
-(void)_resetStallState;
-(id)_strForMuteReason:(int)arg1 ;
-(void)_framesDidDisplayWithPts:(double)arg1 audioDisplayTime:(double)arg2 videoDisplayTime:(double)arg3 ;
-(void)_frameLogging:(SCD_Struct_IM9)arg1 frameDisplayPlayerTimestamp:(SCD_Struct_IM9)arg2 ;
-(void)_handleFrameDisplayError:(id)arg1 ;
-(void)_updateAVSyncWithSample:(double)arg1 ;
-(void)dealloc;
-(id)description;
-(void)invalidate;
-(id<FNFSynchronousPlayerDelegate>)delegate;
-(void)setDelegate:(id<FNFSynchronousPlayerDelegate>)arg1 ;
-(id)error;
-(void)pause;
-(long long)status;
-(id)currentItem;
-(void)play;
-(void)_updateStatus:(long long)arg1 ;
-(SCD_Struct_IM9)currentTime;
-(float)volume;
-(void)setVolume:(float)arg1 ;
-(void)setRate:(float)arg1 ;
-(float)rate;
-(void)applicationDidBecomeActive;
-(void)applicationWillResignActive;
-(void)setMuted:(BOOL)arg1 ;
-(BOOL)isMuted;
-(void)_setupAudio;
-(void)removeTimeObserver:(id)arg1 ;
-(void)replaceCurrentItemWithPlayerItem:(id)arg1 ;
-(void)seekToTime:(SCD_Struct_IM9)arg1 toleranceBefore:(SCD_Struct_IM9)arg2 toleranceAfter:(SCD_Struct_IM9)arg3 completionHandler:(/*^block*/id)arg4 ;
-(void)seekToTime:(SCD_Struct_IM9)arg1 completionHandler:(/*^block*/id)arg2 ;
-(void)_resumePlayback;
-(void)addTimeObserver:(id)arg1 ;
-(void)setAudioEngine:(id)arg1 ;
-(BOOL)_readyToPlay;
-(void)durationChanged:(SCD_Struct_IM9)arg1 ;
@end

