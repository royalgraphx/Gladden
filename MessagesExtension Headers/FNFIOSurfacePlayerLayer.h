/*
* This header is generated by classdump-dyld 1.0
* on Tuesday, August 18, 2020 at 5:59:20 AM Central Daylight Time
* Operating System: Version 13.3 (Build 17C54)
* Image Source: /private/var/containers/Bundle/Application/97E911F0-28BD-48AC-8574-5B9D68F985F0/Game Pack.app/PlugIns/MessagesExtension.appex/MessagesExtension
* classdump-dyld is licensed under GPLv3, Copyright Â© 2013-2016 by Elias Limneos.
*/

#import <MessagesExtension/MessagesExtension-Structs.h>
#import <QuartzCore/CALayer.h>
#import <MessagesExtension/FNFDecompressionSessionDelegate.h>
#import <libobjc.A.dylib/CALayerDelegate.h>
#import <MessagesExtension/FNFPlayerDisplayEngine.h>
#import <MessagesExtension/FNFAVPlayerLayer.h>

@protocol FNFFramesBufferManaging, FNFDecompressionSession, OS_dispatch_queue, FNFVideoPlaybackLoggingContext, FNFPlayerDisplayEngineDelegate;
@class NSError, NSString, CADisplayLink, NSObject, FNFRenderingThread;

@interface FNFIOSurfacePlayerLayer : CALayer <FNFDecompressionSessionDelegate, CALayerDelegate, FNFPlayerDisplayEngine, FNFAVPlayerLayer> {

	CGAffineTransform _preferredTransform;
	CADisplayLink* _displayLink;
	NSString* _videoGravity;
	BOOL _shouldRenderWhilePlaybackPaused;
	BOOL _layoutChanged;
	CGSize _presentationSize;
	CGSize _layerSize;
	BOOL _isReadyForDisplay;
	id<FNFFramesBufferManaging> _framesBuffer;
	id<FNFDecompressionSession> _decompressionSession;
	id<FNFDecompressionSession> _previousDecompressionSession;
	/*^block*/id _dataBlock;
	NSObject*<OS_dispatch_queue> _dataQueue;
	BOOL _requestingData;
	NSError* _layerError;
	BOOL _flushSessionInProgress;
	OpaqueCMTimebaseRef _controlTimeBase;
	FNFRenderingThread* _renderingThread;
	BOOL _optimizeMemory;
	BOOL _blockPlayWhenNotActive;
	BOOL _allowPlayWhenInactive;
	BOOL _storeLastDisplayedSampleBuffer;
	CVBufferRef _lastDisplayedSampleBuffer;
	BOOL _requestedResizeDecompressionSession;
	unsigned _numOfVP9DecoderThreads;
	int _sampleBufferRequestThreshold;
	int _sampleBufferRequestThresholdVP9;
	BOOL _appActive;
	BOOL _enableDisplaylinkControlOnRenderingThread;
	BOOL _lastDisplayedBufferExists;
	BOOL _displayFirstFrame;
	NSDictionary* _codecMap;
	BOOL _shouldApplyRotationTransform;
	id<FNFVideoPlaybackLoggingContext> _loggingContext;
	BOOL _needsDisplayFrame;
	BOOL _disablePreventPlayback;
	BOOL _shouldNotCommitCATransactionWhenDecode;
	FNFDecompressionConfig _decompressionConfig;
	BOOL _disableApplyTransformIfUnchanged;
	id _lastDecodedFrame;
	BOOL _useCALayerDelegateForRender;
	BOOL _dispatchLastDecodeFrameToMainQueue;
	id<FNFPlayerDisplayEngineDelegate> _displayEngineDelegate;

}

@property (assign,nonatomic,__weak) id<FNFPlayerDisplayEngineDelegate> displayEngineDelegate;              //@synthesize displayEngineDelegate=_displayEngineDelegate - In the implementation block
@property (readonly) unsigned long long hash; 
@property (readonly) Class superclass; 
@property (copy,readonly) NSString * description; 
@property (copy,readonly) NSString * debugDescription; 
@property (retain) OpaqueCMTimebaseRef controlTimebase; 
@property (nonatomic,readonly) long long status; 
@property (nonatomic,readonly) NSError * error; 
@property (assign,nonatomic) CGAffineTransform preferredTransform; 
@property (nonatomic,retain) id<FNFAVPlayer> player; 
@property (getter=isReadyForDisplay,nonatomic,readonly) BOOL readyForDisplay; 
@property (nonatomic,readonly) CGSize presentationSize; 
@property (nonatomic,copy) NSString * videoGravity; 
-(void)setLoggingContext:(id)arg1 ;
-(void)setShouldApplyRotationTransform:(BOOL)arg1 ;
-(BOOL)allowRenderingWhileApplicationInactive;
-(BOOL)flushDisplayReadySampleBuffers;
-(BOOL)seekFrameUpdatesFinished;
-(BOOL)flushIfError;
-(void)enqueueSampleBuffer:(opaqueCMSampleBufferRef)arg1 attributes:(unsigned)arg2 codec:(unsigned long long)arg3 enqueueInfo:(id)arg4 ;
-(void)setNeedsDisplayFrame;
-(void)displayFrameAsApplicable;
-(void)setRenderingThreadPriority:(double)arg1 ;
-(void)dispatchAsyncOnRenderingThread:(/*^block*/id)arg1 ;
-(void)yieldDecompressedBuffer:(CVBufferRef)arg1 presentationTimeStamp:(SCD_Struct_IM9)arg2 presentationDuration:(SCD_Struct_IM9)arg3 ;
-(void)requestLastDisplayedSampleBuffer:(/*^block*/id)arg1 onQueue:(id)arg2 ;
-(id<FNFPlayerDisplayEngineDelegate>)displayEngineDelegate;
-(void)setDisplayEngineDelegate:(id<FNFPlayerDisplayEngineDelegate>)arg1 ;
-(void)yieldDecompressedBuffer:(CVBufferRef)arg1 presentationTimeStamp:(SCD_Struct_IM9)arg2 presentationDuration:(SCD_Struct_IM9)arg3 iFrame:(unsigned long long)arg4 ;
-(void)handleDecompressionSessionError:(id)arg1 ;
-(void)handleDecompressionSessionError:(id)arg1 ifIFrameStillValid:(unsigned long long)arg2 ;
-(void)handleDecopmressionSessionWarning:(id)arg1 ;
-(id)decompressionSessionSupplementalLogs;
-(id)initWithConfig:(SCD_Struct_FN56)arg1 andCodecMap:(NSDictionary*)arg2 ;
-(void)_requestResizeDecompressionSession;
-(void)dispatchSyncOnRenderingThread:(/*^block*/id)arg1 ;
-(void)_pauseDisplayLink:(BOOL)arg1 ;
-(void)_requestLastDisplayedSampleBuffer:(/*^block*/id)arg1 onQueue:(id)arg2 ;
-(void)_tryToMoveToNextFrameWithDrawingOn:(BOOL)arg1 isFirstFrame:(BOOL)arg2 ;
-(void)_releaseTimeBase;
-(void)displayPixelBuffer:(CVBufferRef)arg1 ;
-(void)_decodePixelBuffer:(CVBufferRef)arg1 ;
-(void)_drawFrame;
-(void)_setLastDecodedFrame:(id)arg1 ;
-(void)_resetRendering;
-(void)_displayFirstFrameAsApplicable;
-(void)_handleError:(id)arg1 ifIFrameStillValid:(unsigned long long)arg2 ;
-(void)_updateReadyForDisplay:(BOOL)arg1 ;
-(void)_setPreferredTransform:(id)arg1 ;
-(void)_apply3DTransform:(CATransform3D)arg1 ;
-(BOOL)_preventPlayback;
-(void)dealloc;
-(NSString *)description;
-(void)invalidate;
-(NSError *)error;
-(void)resume;
-(long long)status;
-(void)flush;
-(void)displayLayer:(id)arg1 ;
-(void)didBecomeActive;
-(void)willResignActive;
-(void)_applicationWillResignActive:(id)arg1 ;
-(void)_applicationDidBecomeActive:(id)arg1 ;
-(void)layoutSublayers;
-(void)_handleError:(id)arg1 ;
-(void)_requestData;
-(CGAffineTransform)preferredTransform;
-(id)initWithConfig:(SCD_Struct_FN56)arg1 ;
-(id<FNFAVPlayer>)player;
-(void)setPlayer:(id<FNFAVPlayer>)arg1 ;
-(NSString *)videoGravity;
-(void)setVideoGravity:(NSString *)arg1 ;
-(BOOL)isReadyForMoreMediaData;
-(void)stopRequestingMediaData;
-(void)requestMediaDataWhenReadyOnQueue:(id)arg1 usingBlock:(/*^block*/id)arg2 ;
-(void)flushAndRemoveImage;
-(void)pause:(int)arg1 ;
-(BOOL)isReadyForDisplay;
-(void)setRenderer:(id)arg1 ;
-(CGSize)presentationSize;
-(void)setPreferredTransform:(CGAffineTransform)arg1 ;
-(void)setControlTimebase:(OpaqueCMTimebaseRef)arg1 ;
-(OpaqueCMTimebaseRef)controlTimebase;
-(void)_displayLinkCallback:(id)arg1 ;
-(void)pauseDisplayLink;
-(void)_clearBuffers;
@end

